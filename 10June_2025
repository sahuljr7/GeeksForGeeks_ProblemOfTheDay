// https://www.geeksforgeeks.org/problems/exactly-one-swap--170637/1

Letâ€™s walk through the core logic:

```java
long totalSwaps = (long) n * (n - 1) / 2;
```

> Counts **all possible (i, j)** swap pairs (i < j)

```java
for (int f : freq) {
    if (f > 1) {
        hasDuplicateChar = true;
        duplicateSwaps += (long) f * (f - 1) / 2;
    }
}
```

> Counts the number of swaps that **donâ€™t change the string** (i.e., between equal characters)

```java
long distinct = totalSwaps - duplicateSwaps;
```

> These are the swaps that **change the string**

```java
if (hasDuplicateChar) {
    distinct += 1;
}
```

> The key trick: if **any duplicate character exists**, we can make at least **one swap** that keeps the string same â€” and we must **add 1**.

---

### ðŸ§  Complexity

* **Time:** O(N) â€” one pass to count characters.
* **Space:** O(1) â€” fixed 26-char array.

---

### âœ… Final Java Solution (Clean)

```java
class Solution {
    public int countStrings(String s) {
        int n = s.length();
        long totalSwaps = (long) n * (n - 1) / 2;

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }

        long duplicateSwaps = 0;
        boolean hasDuplicateChar = false;

        for (int f : freq) {
            if (f > 1) {
                hasDuplicateChar = true;
                duplicateSwaps += (long) f * (f - 1) / 2;
            }
        }

        long distinct = totalSwaps - duplicateSwaps;

        if (hasDuplicateChar) {
            distinct += 1;
        }

        return (int) distinct;
    }
}
```

---

### ðŸ”¢ Example: `s = "geek"`

* Total swaps: 6
* Duplicate swaps: 1 (between the 2 `e`s)
* Distinct swaps: `6 - 1 + 1 = 6` âœ… Matches GFG

---

